# frozen_string_literal: true

require 'rails_helper'

RSpec.describe 'Items', type: :request do
  def item_params
    {
      title: 'Test Title for a Snippet',
      body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit tempor.'
    }
  end

  def user_params
    {
      email: 'alice@example.com',
      password: 'foobarbaz',
      password_confirmation: 'foobarbaz'
    }
  end

  def items
    Item.all
  end

  def item
    Item.first
  end

  def current_user
    User.create(user_params)
  end

  # before(:all) do
  #   binding.pry
  #   current_user.items.build(item_params)
  # end

  after(:all) do
    Item.delete_all
    # User.delete_all
  end

  context 'while signed in' do
    def headers
      {
        'HTTP_AUTHORIZATION' => "Token token=#{@token}"
      }
    end

    before(:each) do
      post '/sign-up', params: { credentials: user_params }
      post '/sign-in', params: { credentials: user_params }

      @token = JSON.parse(response.body)['user']['token']
      @user_id = JSON.parse(response.body)['user']['id']
    end

    describe 'GET /items' do
      it 'lists all items' do
        get items_path
        expect(response).to be_success

        items_response = JSON.parse(response.body)
        expect(items_response.length).to eq(items.count)
        expect(items_response.first['title']).to eq(item['title'])
      end
    end
  end

  # context 'when authenticated' do
  #   def user_params
  #     {
  #       email: 'alice@example.com',
  #       password: 'foobarbaz',
  #       password_confirmation: 'foobarbaz'
  #     }
  #   end
  #
  #   def headers
  #     {
  #       'HTTP_AUTHORIZATION' => "Token token=#{@token}"
  #     }
  #   end
  #
  #   before(:each) do
  #     post '/sign-up', params: { credentials: user_params }
  #     post '/sign-in', params: { credentials: user_params }
  #
  #     @token = JSON.parse(response.body)['user']['token']
  #     @user_id = JSON.parse(response.body)['user']['id']
  #   end
  #
  #   describe 'GET /items' do
  #     it 'is successful' do
  #       get '/items', headers: headers
  #
  #       expect(response).to be_success
  #
  #       parsed_response = JSON.parse(response.body)
  #       expect(
  #         parsed_response['items']
  #       ).not_to be_empty
  #     end
  #   end
  # end
end
